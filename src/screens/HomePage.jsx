// src/screens/Homepage.jsx
import React, { useState, useMemo, useEffect, useRef } from "react";
import { useNavigate } from "react-router-dom";
import "../styles/HomePage.css";
import heritagesData from "../data/heritages.json";

// ·∫¢nh fallback khi kh√¥ng t√¨m th·∫•y ·∫£nh theo t√™n trong JSON
import FallbackImg from "../images/HomePage.jpg";

// Helper auto-map ·∫£nh theo t√™n file (ƒë√£ t·∫°o ·ªü src/utils/images.js)
import { resolveImageByName } from "../utils/images";

export default function HomePage() {
  const navigate = useNavigate();

  const [hovered, setHovered] = useState(null);
  const [page, setPage] = useState(0);
  const [overlayPos, setOverlayPos] = useState(null); // {top,left,width}
  const containerRef = useRef(null);

  // 4x2 layout => 8 items / page
  const ITEMS_PER_PAGE = 8;
  const totalPages = Math.max(1, Math.ceil(heritagesData.length / ITEMS_PER_PAGE));

  // clamp page if data length changed
  useEffect(() => {
    if (page > totalPages - 1) {
      setPage(totalPages - 1);
      setHovered(null);
      setOverlayPos(null);
    }
  }, [totalPages, page]);

  const getPageItems = (p) => {
    const start = p * ITEMS_PER_PAGE;
    return heritagesData.slice(start, start + ITEMS_PER_PAGE);
  };

  const pageItems = useMemo(() => getPageItems(page), [page]);
  const active = heritagesData.find((h) => h.id === hovered);

  const goToPage = (p) => {
    const next = Math.min(Math.max(0, p), totalPages - 1);
    setPage(next);
    setHovered(null);
    setOverlayPos(null);
  };
  const nextPage = () => goToPage(page + 1);
  const prevPage = () => goToPage(page - 1);

  // Resolve ·∫£nh theo t√™n trong JSON, fallback n·∫øu kh√¥ng c√≥
  const resolveImage = (imgName) => resolveImageByName(imgName, FallbackImg);

  // compute floating overlay position near the hovered item
  const showOverlayFor = (id, targetEl) => {
    if (!targetEl) {
      setOverlayPos(null);
      setHovered(null);
      return;
    }
    const rect = targetEl.getBoundingClientRect();
    const vw = Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
    const vh = Math.max(document.documentElement.clientHeight || 0, window.innerHeight || 0);

    const overlayW = 440;
    const overlayH = 230;
    let left = rect.right + 12;
    let top = rect.top;

    if (left + overlayW > vw - 12) left = rect.left - overlayW - 12;
    if (left < 12) left = 12;
    if (top + overlayH > vh - 12) top = Math.max(12, vh - overlayH - 12);
    if (top < 12) top = 12;

    setOverlayPos({ top: Math.round(top), left: Math.round(left), width: overlayW });
    setHovered(id);
  };

  const hideOverlay = () => {
    setHovered(null);
    setOverlayPos(null);
  };

  const onItemEnter = (e, id) => showOverlayFor(id, e.currentTarget);
  const onItemLeave = () => {
    // small grace period to let cursor move into the overlay
    setTimeout(() => {
      const overlay = document.querySelector(".hg-preview-overlay");
      if (!overlay || !overlay.matches(":hover")) hideOverlay();
    }, 120);
  };

  const onOverlayMouseLeave = () => hideOverlay();
  const onItemFocus = (e, id) => showOverlayFor(id, e.currentTarget);
  const onItemBlur = () => {
    setTimeout(() => {
      const overlay = document.querySelector(".hg-preview-overlay");
      if (!overlay || !overlay.contains(document.activeElement)) hideOverlay();
    }, 120);
  };

  return (
    <div className="hg-homepage" ref={containerRef}>
      {/* HERO */}
      <header className="hg-hero">
        <div className="hg-hero-inner hg-container">
          <div className="hg-hero-left">
            <h1>Kh√°m ph√° Di t√≠ch & Th·∫Øng c·∫£nh ‚Äî C·∫ßn Th∆°</h1>
            <p className="hg-lead">
              H·ªá th·ªëng th√¥ng tin t·∫≠p trung v·ªÅ c√°c di t√≠ch, th·∫Øng c·∫£nh v√† ƒëi·ªÉm
              vƒÉn h√≥a t·∫°i t·ªânh C·∫ßn Th∆°. Di chu·ªôt (hover) v√†o m·ªôt ƒëi·ªÉm ƒë·ªÉ xem
              preview, click ƒë·ªÉ xem chi ti·∫øt.
            </p>
            <div className="hg-hero-actions">
              <button
                className="btn primary"
                onClick={() => window.scrollTo({ top: 600, behavior: "smooth" })}
              >
                Kh√°m ph√° ngay ‚Üì
              </button>
              <button className="btn ghost" onClick={() => navigate("/information")}>
                Xem th√¥ng tin chung
              </button>
            </div>
          </div>
        </div>
        {/* subtle animated gradient strip */}
        <div className="hg-hero-accent" aria-hidden />
      </header>

      {/* LIST + PAGINATION */}
      <section className="hg-divisions">
        <div className="hg-container">
          <div className="hg-left-col">
            <h2>Danh lam ‚Äî Th·∫Øng c·∫£nh</h2>
            <p className="small-muted">
              Di chu·ªôt (hover) ƒë·ªÉ xem preview nhanh, click ƒë·ªÉ xem chi ti·∫øt.
            </p>

            {/* 4x2 grid (8 items) */}
            <div className="hg-division-grid-paged" role="list">
              {pageItems.map((h, idx) => (
                <button
                  key={`${h.id}-${page}`}
                  data-id={h.id}
                  className={`hg-division-item reveal ${hovered === h.id ? "active" : ""}`}
                  onMouseEnter={(e) => onItemEnter(e, h.id)}
                  onMouseLeave={onItemLeave}
                  onFocus={(e) => onItemFocus(e, h.id)}
                  onBlur={onItemBlur}
                  onClick={() => navigate(`/heritage/${h.id}`)}
                  role="listitem"
                  type="button"
                  style={{ animationDelay: `${idx * 60}ms` }}
                >
                  <div className="div-name">{h.name}</div>
                  <div className="div-meta">
                    <span>{h.location || "‚Äî"}</span>
                    <span>{h.category || ""}</span>
                  </div>
                </button>
              ))}
            </div>

            {/* pagination */}
            <div className="hg-pagination">
              <button className="btn outline" onClick={prevPage} disabled={page === 0}>
                ‚Üê Tr∆∞·ªõc
              </button>
              <div className="page-indicator">
                Trang {page + 1} / {totalPages}
              </div>
              <button className="btn outline" onClick={nextPage} disabled={page === totalPages - 1}>
                Ti·∫øp ‚Üí
              </button>
            </div>
          </div>
          <aside className="hg-right-col" aria-hidden="true" />
        </div>
      </section>

      {/* ABOUT */}
      <section className="hg-about">
        <div className="hg-container">
          <div className="about-content">
            <h2>V·ªÅ FlagGo ‚Äî C·∫ßn Th∆°</h2>
            <p>
              FlagGo l√† n·ªÅn t·∫£ng gi·ªõi thi·ªáu h·ªá th·ªëng di t√≠ch v√† th·∫Øng c·∫£nh c·ªßa
              t·ªânh C·∫ßn Th∆°, gi√∫p b·∫°n d·ªÖ d√†ng ti·∫øp c·∫≠n th√¥ng tin l·ªãch s·ª≠, vƒÉn
              h√≥a, v√† c√°c ƒëi·ªÉm ƒë·∫øn n·ªïi b·∫≠t.
            </p>
            <div className="about-cards">
              <div className="about-card">
                <h4>üìö Ki·∫øn th·ª©c</h4>
                <p>T·∫≠p h·ª£p th√¥ng tin chu·∫©n x√°c, d·ªÖ ti·∫øp c·∫≠n.</p>
              </div>
              <div className="about-card">
                <h4>üåè Du l·ªãch</h4>
                <p>G·ª£i √Ω ƒë·ªãa ƒëi·ªÉm, tr·∫£i nghi·ªám vƒÉn h√≥a ƒë·∫∑c s·∫Øc.</p>
              </div>
              <div className="about-card">
                <h4>üèõÔ∏è Di s·∫£n</h4>
                <p>B·∫£o t·ªìn gi√° tr·ªã vƒÉn h√≥a v√† truy·ªÅn th·ªëng l√¢u ƒë·ªùi.</p>
              </div>
            </div>
          </div>
        </div>
      </section>

      {/* Floating overlay preview */}
      {active && overlayPos && (
        <div
          className="hg-preview-overlay enter"
          style={{ top: overlayPos.top, left: overlayPos.left, width: overlayPos.width, position: "fixed" }}
          onMouseLeave={onOverlayMouseLeave}
          onMouseEnter={() => {}}
        >
          <div className="preview-image">
            <img
              src={resolveImage(active.image)}
              alt={active.name}
              onError={(e) => (e.currentTarget.src = FallbackImg)}
            />
          </div>
          <div className="preview-body">
            <h3>{active.name}</h3>
            <div className="preview-stats">
              <div>
                <strong>V·ªã tr√≠</strong>
                <br />
                {active.location || "‚Äî"}
              </div>
              <div>
                <strong>Lo·∫°i</strong>
                <br />
                {active.category || "‚Äî"}
              </div>
            </div>
            <p className="preview-desc">{active.shortDesc || active.description}</p>
            <div style={{ marginTop: 8, display: "flex", gap: 8 }}>
              <button className="btn outline" onClick={() => navigate(`/heritage/${active.id}`)}>Xem chi ti·∫øt</button>
              <button className="btn" onClick={() => hideOverlay()}>ƒê√≥ng</button>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
